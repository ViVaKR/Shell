#!/usr/bin/env zsh

ulr="\u2728"
u1="\u27A5"
cyw="\033[33m"
cred="\033[31m"
crm="\033[0m"
echo
echo "$cyw $ulr ZSH Shell Start $ulr $crm"
echo
function test() {
	local arr=("hello", "world")
	echo
	echo ${arr[@]}
	echo
}
test


declare -r r=30 # 읽기전용 변수 선언
readonly const=400 # var 변수를 상수로 선언
declare -i num # number 변수를 정수형으로 선언
num=456

arr=(1 2 3 4 5) # 1부터 10까지의 배열을 만든다.
for i in ${arr[@]}; do
	echo -e "\033[33m \u27AD ${i}\033[0m"
done

declare -i number # number 변수를 정수형으로 선언
number=123
echo
printf "number = %d\n" $number
echo

declare -a array # array 변수를 배열로 선언
array=(123 456 678 999)
printf "\n[ declare -a array example ]\n"
for i in ${array[@]}; do
	printf "array = %d\n" $i
done

declare -a colors
colors=(30 31 32 33 34 35 36 37)

for i in ${colors[@]}; do
	printf "\033[%dm", $i
	printf "- Hi, Everyone! - %d\n" $i
	printf "\033[0m"
done

declare -A map # map 변수를 연관배열(MAP)로 선언
map["name"]="장길산"
map["age"]=30
map["addr"]="서울시 강남구"
echo -e "[ 연관배열 ]\n${map["name"]}\n${map["age"]}\n${map["addr"]}"

for key val in ${map[@]}; do
	echo -e "Key: ${key}, Value: ${val}"
done

echo ${map[@]}

declare -f demo # test 함수를 선언

function demo() {
	echo "Hello, World!"
}
demo

export HelloWorld="Hello, World!" # 환경변수로 선언
# echo $HelloWorld
# 변수명 앞에 export 키워드를 붙이면 환경변수로 선언된다.

echo $cred

echo "$u1 실행된 셀 스크립트 파일명: '\$0'"
echo $0

echo "$u1 총 아규먼트 갯수 : '\$#'"
echo $#

echo "실행후 반환값 '\$?'"
echo $?

for i in $*; do
    echo "$u1 아규먼트 값 : $i"
done

echo "$u1 현재 셸 PID : '\$$'"
echo "$u1 마지막 백그라운드 작업 PID : '\$!'"
echo $crm


printf "Hello World %s\n " 'scale=6; 3.141592'

bc <<< 'scale=6; 3.141592'

echo "scale=6; 3.141592" | bc

result=$(bc <<< 'scale=6; 3.141592')
echo result = $result

echo "전체 인자 수 : $#"
echo "전체 인자 값\n$*\n$@"

echo "프로그램 지원 언어 : $LANG"









echo "\033[34m"
echo "$ulr [ End of ZSH Shell ] $ulr"
echo "\033[0m"

unset HelloWorld
unset arr
unset map
unset num

return 123
# (1) Shebang (#!) : 어떤 인터프리터를 사용할지 쉘 스크립트에게 알려주는 방법

# (2) PIPING : Send command output to other commands
# ~$ echo Hello there | grep there

# (3) Output redirection
# ~$ echo Hello World > hello.txt
# ~$ echo Hi Everyone >> hello.txt
